{
  "address": "0x24C0A4CEb85A13802382c880eAf02BE832244ce3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftShortHand",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Product_Creator_Unidentified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Product_Not_Purchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Product_Owner_Unidentified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Product_WarrantyPeriod_Over",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "hasPurchased",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "changeCurrentOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentWarrantyDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPreviousOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setDurationForTokenId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce662de3c8c64cfa2e6373462e7bab52ecdd0366d098a8ff66ba159cf8f6194c",
  "receipt": {
    "to": null,
    "from": "0xB2bfb1b6Afb9d829118936BE3e3b8143Cc9B2b57",
    "contractAddress": "0x24C0A4CEb85A13802382c880eAf02BE832244ce3",
    "transactionIndex": 10,
    "gasUsed": "3076680",
    "logsBloom": "0x
    "blockHash": "0xa42d8142951b2cae42d323eb87eb32615f6b25e6f7eaa419d45fa24543a88d09",
    "transactionHash": "0xce662de3c8c64cfa2e6373462e7bab52ecdd0366d098a8ff66ba159cf8f6194c",
    "logs": [],
    "blockNumber": 11109319,
    "cumulativeGasUsed": "5435186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Tempro",
    "RET"
  ],
  "numDeployments": 2,
  "solcInputHash": "3d6b7cbdff4b49cf161a731b19acf532",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftShortHand\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Product_Creator_Unidentified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Product_Not_Purchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Product_Owner_Unidentified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Product_WarrantyPeriod_Over\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hasPurchased\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeCurrentOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentWarrantyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPreviousOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDurationForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WarrantyCardNFT.sol\":\"WarrantyCardStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/WarrantyCardNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror Product_Not_Purchased();\\nerror Product_Creator_Unidentified();\\nerror Product_Owner_Unidentified();\\nerror Product_WarrantyPeriod_Over();\\n\\ncontract WarrantyCardStorage is ERC721, ERC721URIStorage, ERC721Burnable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    struct nftInfo {\\n        uint256 duration;\\n        uint256 startTime;\\n        uint256 endTime;\\n        address[] owners;\\n    }\\n\\n    address payable private i_nftCreator = payable(address(0)); // Store address of creator of Warranty Card\\n    // string public i_productName; // Stores the name/title of the product\\n    mapping(uint256 => nftInfo) private tokenIdToNFTInfo;\\n\\n    // Only the creator of the product warranty card can call a function\\n    modifier onlyByCreator(address accountAddress) {\\n        if (accountAddress != i_nftCreator) {\\n            revert Product_Creator_Unidentified();\\n        }\\n        _;\\n    }\\n\\n    // Only the owner of the product warranty card can call a function\\n    modifier onlyByOwner(address accountAddress, uint256 tokenId) {\\n        address[] memory temp = tokenIdToNFTInfo[tokenId].owners;\\n        uint256 len = temp.length;\\n        address currentOwnerAddress = temp[len - 1];\\n        if (accountAddress != currentOwnerAddress) {\\n            revert Product_Owner_Unidentified();\\n        }\\n        _;\\n    }\\n\\n    modifier checkForEndOfWarranty(uint256 tokenId) {\\n        if (tokenIdToNFTInfo[tokenId].endTime != 0) {\\n            if (block.timestamp >= tokenIdToNFTInfo[tokenId].endTime) {\\n                revert Product_WarrantyPeriod_Over();\\n            }\\n        }\\n        _;\\n    }\\n\\n    // WarrantyCard Constructor takes in the warranty duration and productName as arguments\\n    // ERC721 takes the NFT name and another Shorthand\\n    constructor(string memory nftName, string memory nftShortHand)\\n        ERC721(nftName, nftShortHand)\\n    {\\n        i_nftCreator = payable(msg.sender);\\n    }\\n\\n    // Change/Transfer ownership of a product warranty card upon resale\\n    function changeCurrentOwner(\\n        bool hasPurchased,\\n        address newOwner,\\n        uint256 tokenId\\n    ) public onlyByOwner(msg.sender, tokenId) checkForEndOfWarranty(tokenId) {\\n        // Revert the transaction if the product has not been purchased\\n        if (!hasPurchased) {\\n            revert Product_Not_Purchased();\\n        }\\n\\n        if (tokenIdToNFTInfo[tokenId].startTime == 0) {\\n            tokenIdToNFTInfo[tokenId].startTime = block.timestamp;\\n        }\\n\\n        if (tokenIdToNFTInfo[tokenId].endTime == 0) {\\n            tokenIdToNFTInfo[tokenId].endTime =\\n                tokenIdToNFTInfo[tokenId].startTime +\\n                tokenIdToNFTInfo[tokenId].duration;\\n        }\\n\\n        tokenIdToNFTInfo[tokenId].owners.push(newOwner);\\n    }\\n\\n    // Extend the duration of warranty. Only the brand/retailer can do so.\\n    // function extendWarrantyDuration(uint256 increasedDuration) public onlyByCreator(msg.sender) {\\n    //     warrantyDuration += increasedDuration;\\n    //     warrantyEndTime += increasedDuration;\\n    // }\\n\\n    // Safely mint the tokens i.e. only the retailer can add more NFT's/warranty cards in this collection\\n    function safeMint(address to, string memory uri)\\n        public\\n        onlyByCreator(msg.sender)\\n        returns (uint256)\\n    {\\n        _tokenIdCounter.increment();\\n        // uint256 tokenId = _tokenIdCounter.current();\\n        uint256 newItemId = _tokenIdCounter.current();\\n        _setTokenURI(newItemId, uri);\\n        _safeMint(to, newItemId);\\n        return newItemId;\\n    }\\n\\n    function setDurationForTokenId(uint256 tokenId, uint256 duration)\\n        public\\n        checkForEndOfWarranty(tokenId)\\n        onlyByCreator(msg.sender)\\n    {\\n        tokenIdToNFTInfo[tokenId] = nftInfo({\\n            duration: duration,\\n            startTime: 0,\\n            endTime: 0,\\n            owners: new address[](0)\\n        });\\n        tokenIdToNFTInfo[tokenId].owners.push(msg.sender);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    // Returns the tokenURI i.e the json metadata\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function getCurrentWarrantyDuration(uint256 tokenId)\\n        public\\n        view\\n        checkForEndOfWarranty(tokenId)\\n        returns (uint256)\\n    {\\n        return tokenIdToNFTInfo[tokenId].duration;\\n    }\\n\\n    function getEndTime(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToNFTInfo[tokenId].endTime;\\n    }\\n\\n    function getPreviousOwner(uint256 tokenId, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address[] memory owners = tokenIdToNFTInfo[tokenId].owners;\\n        if (owners.length > 0) {\\n            return owners[index];\\n        }\\n        return address(0);\\n    }\\n\\n    function getStartTime(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToNFTInfo[tokenId].startTime;\\n    }\\n\\n    function getBlockTimeStamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0d933cdf6f27960ab8cbb09a918a8adfd71e5d20acf567aa8d34d2240e994eea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005357600080fd5b50604051620039a8380380620039a8833981810160405281019062000079919062000345565b8181816000908051906020019062000093929190620000f8565b508060019080519060200190620000ac929190620000f8565b50505033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200042f565b8280546200010690620003f9565b90600052602060002090601f0160209004810192826200012a576000855562000176565b82601f106200014557805160ff191683800117855562000176565b8280016001018555821562000176579182015b828111156200017557825182559160200191906001019062000158565b5b50905062000185919062000189565b5090565b5b80821115620001a45760008160009055506001016200018a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200021182620001c6565b810181811067ffffffffffffffff82111715620002335762000232620001d7565b5b80604052505050565b600062000248620001a8565b905062000256828262000206565b919050565b600067ffffffffffffffff821115620002795762000278620001d7565b5b6200028482620001c6565b9050602081019050919050565b60005b83811015620002b157808201518184015260208101905062000294565b83811115620002c1576000848401525b50505050565b6000620002de620002d8846200025b565b6200023c565b905082815260208101848484011115620002fd57620002fc620001c1565b5b6200030a84828562000291565b509392505050565b600082601f8301126200032a5762000329620001bc565b5b81516200033c848260208601620002c7565b91505092915050565b600080604083850312156200035f576200035e620001b2565b5b600083015167ffffffffffffffff81111562000380576200037f620001b7565b5b6200038e8582860162000312565b925050602083015167ffffffffffffffff811115620003b257620003b1620001b7565b5b620003c08582860162000312565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200041257607f821691505b60208210811415620004295762000428620003ca565b5b50919050565b613569806200043f6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063bc2be1be1161007c578063bc2be1be14610397578063c87b56dd146103c7578063ca49a543146103f7578063d204c45e14610415578063d93fdde914610445578063e985e9c51461046157610142565b806370a08231146102e15780639067b6771461031157806395d89b4114610341578063a22cb4651461035f578063b88d4fde1461037b57610142565b806323b872dd1161010a57806323b872dd1461021157806331af64181461022d57806333c734971461025d57806342842e0e1461027957806342966c68146102955780636352211e146102b157610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631b594e2e146101e1575b600080fd5b610161600480360381019061015c91906124a6565b610491565b60405161016e91906124ee565b60405180910390f35b61017f610573565b60405161018c91906125a2565b60405180910390f35b6101af60048036038101906101aa91906125fa565b610605565b6040516101bc9190612668565b60405180910390f35b6101df60048036038101906101da91906126af565b61064b565b005b6101fb60048036038101906101f691906126ef565b610763565b6040516102089190612668565b60405180910390f35b61022b6004803603810190610226919061272f565b61083c565b005b610247600480360381019061024291906125fa565b61089c565b6040516102549190612791565b60405180910390f35b610277600480360381019061027291906126ef565b61092c565b005b610293600480360381019061028e919061272f565b610b5d565b005b6102af60048036038101906102aa91906125fa565b610b7d565b005b6102cb60048036038101906102c691906125fa565b610bd9565b6040516102d89190612668565b60405180910390f35b6102fb60048036038101906102f691906127ac565b610c8b565b6040516103089190612791565b60405180910390f35b61032b600480360381019061032691906125fa565b610d43565b6040516103389190612791565b60405180910390f35b610349610d63565b60405161035691906125a2565b60405180910390f35b61037960048036038101906103749190612805565b610df5565b005b6103956004803603810190610390919061297a565b610e0b565b005b6103b160048036038101906103ac91906125fa565b610e6d565b6040516103be9190612791565b60405180910390f35b6103e160048036038101906103dc91906125fa565b610e8d565b6040516103ee91906125a2565b60405180910390f35b6103ff610e9f565b60405161040c9190612791565b60405180910390f35b61042f600480360381019061042a9190612a9e565b610ea7565b60405161043c9190612791565b60405180910390f35b61045f600480360381019061045a9190612afa565b610f68565b005b61047b60048036038101906104769190612b4d565b611274565b60405161048891906124ee565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056c575061056b82611308565b5b9050919050565b60606000805461058290612bbc565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae90612bbc565b80156105fb5780601f106105d0576101008083540402835291602001916105fb565b820191906000526020600020905b8154815290600101906020018083116105de57829003601f168201915b5050505050905090565b600061061082611372565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061065682610bd9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be90612c60565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106e66113bd565b73ffffffffffffffffffffffffffffffffffffffff16148061071557506107148161070f6113bd565b611274565b5b610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b90612cf2565b60405180910390fd5b61075e83836113c5565b505050565b600080600960008581526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b2575b50505050509050600081511115610830578083815181106108205761081f612d12565b5b6020026020010151915050610836565b60009150505b92915050565b61084d6108476113bd565b8261147e565b61088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088390612db3565b60405180910390fd5b610897838383611513565b505050565b600081600060096000838152602001908152602001600020600201541461090d576009600082815260200190815260200160002060020154421061090c576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6009600084815260200190815260200160002060000154915050919050565b81600060096000838152602001908152602001600020600201541461099b576009600082815260200190815260200160002060020154421061099a576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b33600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a23576040517ff10d62fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808481526020016000815260200160008152602001600067ffffffffffffffff811115610a5d57610a5c61284f565b5b604051908082528060200260200182016040528015610a8b5781602001602082028036833780820191505090505b50815250600960008681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190610adc9291906122cd565b5090505060096000858152602001908152602001600020600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610b7883838360405180602001604052806000815250610e0b565b505050565b610b8e610b886113bd565b8261147e565b610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490612db3565b60405180910390fd5b610bd68161177a565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990612e1f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390612eb1565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060096000838152602001908152602001600020600201549050919050565b606060018054610d7290612bbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9e90612bbc565b8015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b5050505050905090565b610e07610e006113bd565b8383611786565b5050565b610e1c610e166113bd565b8361147e565b610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290612db3565b60405180910390fd5b610e67848484846118f3565b50505050565b600060096000838152602001908152602001600020600101549050919050565b6060610e988261194f565b9050919050565b600042905090565b600033600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f31576040517ff10d62fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f3b6007611a62565b6000610f476007611a78565b9050610f538185611a86565b610f5d8582611afa565b809250505092915050565b338160006009600083815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561100257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fb8575b5050505050905060008151905060008260018361101f9190612f00565b815181106110305761102f612d12565b5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461109f576040517f3337f25500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85600060096000838152602001908152602001600020600201541461110e576009600082815260200190815260200160002060020154421061110d576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b88611145576040517f57cc96b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060096000898152602001908152602001600020600101541415611180574260096000898152602001908152602001600020600101819055505b6000600960008981526020019081526020016000206002015414156111f257600960008881526020019081526020016000206000015460096000898152602001908152602001600020600101546111d79190612f34565b60096000898152602001908152602001600020600201819055505b60096000888152602001908152602001600020600301889080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61137b81611b18565b6113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b190612e1f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661143883610bd9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061148a83610bd9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114cc57506114cb8185611274565b5b8061150a57508373ffffffffffffffffffffffffffffffffffffffff166114f284610605565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661153382610bd9565b73ffffffffffffffffffffffffffffffffffffffff1614611589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158090612ffc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f09061308e565b60405180910390fd5b611604838383611b84565b61160f6000826113c5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165f9190612f00565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116b69190612f34565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611775838383611b89565b505050565b61178381611b8e565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906130fa565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118e691906124ee565b60405180910390a3505050565b6118fe848484611513565b61190a84848484611be1565b611949576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119409061318c565b60405180910390fd5b50505050565b606061195a82611372565b600060066000848152602001908152602001600020805461197a90612bbc565b80601f01602080910402602001604051908101604052809291908181526020018280546119a690612bbc565b80156119f35780601f106119c8576101008083540402835291602001916119f3565b820191906000526020600020905b8154815290600101906020018083116119d657829003601f168201915b505050505090506000611a04611d78565b9050600081511415611a1a578192505050611a5d565b600082511115611a4f578082604051602001611a379291906131e8565b60405160208183030381529060405292505050611a5d565b611a5884611d8f565b925050505b919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b611a8f82611b18565b611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac59061327e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611af5929190612357565b505050565b611b14828260405180602001604052806000815250611df7565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b611b9781611e52565b6000600660008381526020019081526020016000208054611bb790612bbc565b905014611bde57600660008281526020019081526020016000206000611bdd91906123dd565b5b50565b6000611c028473ffffffffffffffffffffffffffffffffffffffff16611f6f565b15611d6b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c2b6113bd565b8786866040518563ffffffff1660e01b8152600401611c4d94939291906132f3565b602060405180830381600087803b158015611c6757600080fd5b505af1925050508015611c9857506040513d601f19601f82011682018060405250810190611c959190613354565b60015b611d1b573d8060008114611cc8576040519150601f19603f3d011682016040523d82523d6000602084013e611ccd565b606091505b50600081511415611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a9061318c565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d70565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611d9a82611372565b6000611da4611d78565b90506000815111611dc45760405180602001604052806000815250611def565b80611dce84611f92565b604051602001611ddf9291906131e8565b6040516020818303038152906040525b915050919050565b611e0183836120f3565b611e0e6000848484611be1565b611e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e449061318c565b60405180910390fd5b505050565b6000611e5d82610bd9565b9050611e6b81600084611b84565b611e766000836113c5565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec69190612f00565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f6b81600084611b89565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611fda576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120ee565b600082905060005b6000821461200c578080611ff590613381565b915050600a8261200591906133f9565b9150611fe2565b60008167ffffffffffffffff8111156120285761202761284f565b5b6040519080825280601f01601f19166020018201604052801561205a5781602001600182028036833780820191505090505b5090505b600085146120e7576001826120739190612f00565b9150600a85612082919061342a565b603061208e9190612f34565b60f81b8183815181106120a4576120a3612d12565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120e091906133f9565b945061205e565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a906134a7565b60405180910390fd5b61216c81611b18565b156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390613513565b60405180910390fd5b6121b860008383611b84565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122089190612f34565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c960008383611b89565b5050565b828054828255906000526020600020908101928215612346579160200282015b828111156123455782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906122ed565b5b509050612353919061241d565b5090565b82805461236390612bbc565b90600052602060002090601f01602090048101928261238557600085556123cc565b82601f1061239e57805160ff19168380011785556123cc565b828001600101855582156123cc579182015b828111156123cb5782518255916020019190600101906123b0565b5b5090506123d9919061241d565b5090565b5080546123e990612bbc565b6000825580601f106123fb575061241a565b601f016020900490600052602060002090810190612419919061241d565b5b50565b5b8082111561243657600081600090555060010161241e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124838161244e565b811461248e57600080fd5b50565b6000813590506124a08161247a565b92915050565b6000602082840312156124bc576124bb612444565b5b60006124ca84828501612491565b91505092915050565b60008115159050919050565b6124e8816124d3565b82525050565b600060208201905061250360008301846124df565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612543578082015181840152602081019050612528565b83811115612552576000848401525b50505050565b6000601f19601f8301169050919050565b600061257482612509565b61257e8185612514565b935061258e818560208601612525565b61259781612558565b840191505092915050565b600060208201905081810360008301526125bc8184612569565b905092915050565b6000819050919050565b6125d7816125c4565b81146125e257600080fd5b50565b6000813590506125f4816125ce565b92915050565b6000602082840312156126105761260f612444565b5b600061261e848285016125e5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061265282612627565b9050919050565b61266281612647565b82525050565b600060208201905061267d6000830184612659565b92915050565b61268c81612647565b811461269757600080fd5b50565b6000813590506126a981612683565b92915050565b600080604083850312156126c6576126c5612444565b5b60006126d48582860161269a565b92505060206126e5858286016125e5565b9150509250929050565b6000806040838503121561270657612705612444565b5b6000612714858286016125e5565b9250506020612725858286016125e5565b9150509250929050565b60008060006060848603121561274857612747612444565b5b60006127568682870161269a565b93505060206127678682870161269a565b9250506040612778868287016125e5565b9150509250925092565b61278b816125c4565b82525050565b60006020820190506127a66000830184612782565b92915050565b6000602082840312156127c2576127c1612444565b5b60006127d08482850161269a565b91505092915050565b6127e2816124d3565b81146127ed57600080fd5b50565b6000813590506127ff816127d9565b92915050565b6000806040838503121561281c5761281b612444565b5b600061282a8582860161269a565b925050602061283b858286016127f0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288782612558565b810181811067ffffffffffffffff821117156128a6576128a561284f565b5b80604052505050565b60006128b961243a565b90506128c5828261287e565b919050565b600067ffffffffffffffff8211156128e5576128e461284f565b5b6128ee82612558565b9050602081019050919050565b82818337600083830152505050565b600061291d612918846128ca565b6128af565b9050828152602081018484840111156129395761293861284a565b5b6129448482856128fb565b509392505050565b600082601f83011261296157612960612845565b5b813561297184826020860161290a565b91505092915050565b6000806000806080858703121561299457612993612444565b5b60006129a28782880161269a565b94505060206129b38782880161269a565b93505060406129c4878288016125e5565b925050606085013567ffffffffffffffff8111156129e5576129e4612449565b5b6129f18782880161294c565b91505092959194509250565b600067ffffffffffffffff821115612a1857612a1761284f565b5b612a2182612558565b9050602081019050919050565b6000612a41612a3c846129fd565b6128af565b905082815260208101848484011115612a5d57612a5c61284a565b5b612a688482856128fb565b509392505050565b600082601f830112612a8557612a84612845565b5b8135612a95848260208601612a2e565b91505092915050565b60008060408385031215612ab557612ab4612444565b5b6000612ac38582860161269a565b925050602083013567ffffffffffffffff811115612ae457612ae3612449565b5b612af085828601612a70565b9150509250929050565b600080600060608486031215612b1357612b12612444565b5b6000612b21868287016127f0565b9350506020612b328682870161269a565b9250506040612b43868287016125e5565b9150509250925092565b60008060408385031215612b6457612b63612444565b5b6000612b728582860161269a565b9250506020612b838582860161269a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bd457607f821691505b60208210811415612be857612be7612b8d565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c4a602183612514565b9150612c5582612bee565b604082019050919050565b60006020820190508181036000830152612c7981612c3d565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612cdc603e83612514565b9150612ce782612c80565b604082019050919050565b60006020820190508181036000830152612d0b81612ccf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612d9d602e83612514565b9150612da882612d41565b604082019050919050565b60006020820190508181036000830152612dcc81612d90565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612e09601883612514565b9150612e1482612dd3565b602082019050919050565b60006020820190508181036000830152612e3881612dfc565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e9b602983612514565b9150612ea682612e3f565b604082019050919050565b60006020820190508181036000830152612eca81612e8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f0b826125c4565b9150612f16836125c4565b925082821015612f2957612f28612ed1565b5b828203905092915050565b6000612f3f826125c4565b9150612f4a836125c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f7f57612f7e612ed1565b5b828201905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612fe6602583612514565b9150612ff182612f8a565b604082019050919050565b6000602082019050818103600083015261301581612fd9565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613078602483612514565b91506130838261301c565b604082019050919050565b600060208201905081810360008301526130a78161306b565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006130e4601983612514565b91506130ef826130ae565b602082019050919050565b60006020820190508181036000830152613113816130d7565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613176603283612514565b91506131818261311a565b604082019050919050565b600060208201905081810360008301526131a581613169565b9050919050565b600081905092915050565b60006131c282612509565b6131cc81856131ac565b93506131dc818560208601612525565b80840191505092915050565b60006131f482856131b7565b915061320082846131b7565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613268602e83612514565b91506132738261320c565b604082019050919050565b600060208201905081810360008301526132978161325b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006132c58261329e565b6132cf81856132a9565b93506132df818560208601612525565b6132e881612558565b840191505092915050565b60006080820190506133086000830187612659565b6133156020830186612659565b6133226040830185612782565b818103606083015261333481846132ba565b905095945050505050565b60008151905061334e8161247a565b92915050565b60006020828403121561336a57613369612444565b5b60006133788482850161333f565b91505092915050565b600061338c826125c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133bf576133be612ed1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613404826125c4565b915061340f836125c4565b92508261341f5761341e6133ca565b5b828204905092915050565b6000613435826125c4565b9150613440836125c4565b9250826134505761344f6133ca565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613491602083612514565b915061349c8261345b565b602082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006134fd601c83612514565b9150613508826134c7565b602082019050919050565b6000602082019050818103600083015261352c816134f0565b905091905056fea264697066735822122009e17032c209b1cebf8d89803c30cf10d8f15a8d5247e1f12ae82f5ff7433c7364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063bc2be1be1161007c578063bc2be1be14610397578063c87b56dd146103c7578063ca49a543146103f7578063d204c45e14610415578063d93fdde914610445578063e985e9c51461046157610142565b806370a08231146102e15780639067b6771461031157806395d89b4114610341578063a22cb4651461035f578063b88d4fde1461037b57610142565b806323b872dd1161010a57806323b872dd1461021157806331af64181461022d57806333c734971461025d57806342842e0e1461027957806342966c68146102955780636352211e146102b157610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631b594e2e146101e1575b600080fd5b610161600480360381019061015c91906124a6565b610491565b60405161016e91906124ee565b60405180910390f35b61017f610573565b60405161018c91906125a2565b60405180910390f35b6101af60048036038101906101aa91906125fa565b610605565b6040516101bc9190612668565b60405180910390f35b6101df60048036038101906101da91906126af565b61064b565b005b6101fb60048036038101906101f691906126ef565b610763565b6040516102089190612668565b60405180910390f35b61022b6004803603810190610226919061272f565b61083c565b005b610247600480360381019061024291906125fa565b61089c565b6040516102549190612791565b60405180910390f35b610277600480360381019061027291906126ef565b61092c565b005b610293600480360381019061028e919061272f565b610b5d565b005b6102af60048036038101906102aa91906125fa565b610b7d565b005b6102cb60048036038101906102c691906125fa565b610bd9565b6040516102d89190612668565b60405180910390f35b6102fb60048036038101906102f691906127ac565b610c8b565b6040516103089190612791565b60405180910390f35b61032b600480360381019061032691906125fa565b610d43565b6040516103389190612791565b60405180910390f35b610349610d63565b60405161035691906125a2565b60405180910390f35b61037960048036038101906103749190612805565b610df5565b005b6103956004803603810190610390919061297a565b610e0b565b005b6103b160048036038101906103ac91906125fa565b610e6d565b6040516103be9190612791565b60405180910390f35b6103e160048036038101906103dc91906125fa565b610e8d565b6040516103ee91906125a2565b60405180910390f35b6103ff610e9f565b60405161040c9190612791565b60405180910390f35b61042f600480360381019061042a9190612a9e565b610ea7565b60405161043c9190612791565b60405180910390f35b61045f600480360381019061045a9190612afa565b610f68565b005b61047b60048036038101906104769190612b4d565b611274565b60405161048891906124ee565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056c575061056b82611308565b5b9050919050565b60606000805461058290612bbc565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae90612bbc565b80156105fb5780601f106105d0576101008083540402835291602001916105fb565b820191906000526020600020905b8154815290600101906020018083116105de57829003601f168201915b5050505050905090565b600061061082611372565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061065682610bd9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be90612c60565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106e66113bd565b73ffffffffffffffffffffffffffffffffffffffff16148061071557506107148161070f6113bd565b611274565b5b610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b90612cf2565b60405180910390fd5b61075e83836113c5565b505050565b600080600960008581526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b2575b50505050509050600081511115610830578083815181106108205761081f612d12565b5b6020026020010151915050610836565b60009150505b92915050565b61084d6108476113bd565b8261147e565b61088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088390612db3565b60405180910390fd5b610897838383611513565b505050565b600081600060096000838152602001908152602001600020600201541461090d576009600082815260200190815260200160002060020154421061090c576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6009600084815260200190815260200160002060000154915050919050565b81600060096000838152602001908152602001600020600201541461099b576009600082815260200190815260200160002060020154421061099a576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b33600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a23576040517ff10d62fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808481526020016000815260200160008152602001600067ffffffffffffffff811115610a5d57610a5c61284f565b5b604051908082528060200260200182016040528015610a8b5781602001602082028036833780820191505090505b50815250600960008681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190610adc9291906122cd565b5090505060096000858152602001908152602001600020600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610b7883838360405180602001604052806000815250610e0b565b505050565b610b8e610b886113bd565b8261147e565b610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490612db3565b60405180910390fd5b610bd68161177a565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990612e1f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390612eb1565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060096000838152602001908152602001600020600201549050919050565b606060018054610d7290612bbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9e90612bbc565b8015610deb5780601f10610dc057610100808354040283529160200191610deb565b820191906000526020600020905b815481529060010190602001808311610dce57829003601f168201915b5050505050905090565b610e07610e006113bd565b8383611786565b5050565b610e1c610e166113bd565b8361147e565b610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290612db3565b60405180910390fd5b610e67848484846118f3565b50505050565b600060096000838152602001908152602001600020600101549050919050565b6060610e988261194f565b9050919050565b600042905090565b600033600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f31576040517ff10d62fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f3b6007611a62565b6000610f476007611a78565b9050610f538185611a86565b610f5d8582611afa565b809250505092915050565b338160006009600083815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561100257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fb8575b5050505050905060008151905060008260018361101f9190612f00565b815181106110305761102f612d12565b5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461109f576040517f3337f25500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85600060096000838152602001908152602001600020600201541461110e576009600082815260200190815260200160002060020154421061110d576040517f380050cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b88611145576040517f57cc96b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060096000898152602001908152602001600020600101541415611180574260096000898152602001908152602001600020600101819055505b6000600960008981526020019081526020016000206002015414156111f257600960008881526020019081526020016000206000015460096000898152602001908152602001600020600101546111d79190612f34565b60096000898152602001908152602001600020600201819055505b60096000888152602001908152602001600020600301889080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61137b81611b18565b6113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b190612e1f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661143883610bd9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061148a83610bd9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114cc57506114cb8185611274565b5b8061150a57508373ffffffffffffffffffffffffffffffffffffffff166114f284610605565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661153382610bd9565b73ffffffffffffffffffffffffffffffffffffffff1614611589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158090612ffc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f09061308e565b60405180910390fd5b611604838383611b84565b61160f6000826113c5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165f9190612f00565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116b69190612f34565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611775838383611b89565b505050565b61178381611b8e565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906130fa565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118e691906124ee565b60405180910390a3505050565b6118fe848484611513565b61190a84848484611be1565b611949576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119409061318c565b60405180910390fd5b50505050565b606061195a82611372565b600060066000848152602001908152602001600020805461197a90612bbc565b80601f01602080910402602001604051908101604052809291908181526020018280546119a690612bbc565b80156119f35780601f106119c8576101008083540402835291602001916119f3565b820191906000526020600020905b8154815290600101906020018083116119d657829003601f168201915b505050505090506000611a04611d78565b9050600081511415611a1a578192505050611a5d565b600082511115611a4f578082604051602001611a379291906131e8565b60405160208183030381529060405292505050611a5d565b611a5884611d8f565b925050505b919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b611a8f82611b18565b611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac59061327e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611af5929190612357565b505050565b611b14828260405180602001604052806000815250611df7565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b611b9781611e52565b6000600660008381526020019081526020016000208054611bb790612bbc565b905014611bde57600660008281526020019081526020016000206000611bdd91906123dd565b5b50565b6000611c028473ffffffffffffffffffffffffffffffffffffffff16611f6f565b15611d6b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c2b6113bd565b8786866040518563ffffffff1660e01b8152600401611c4d94939291906132f3565b602060405180830381600087803b158015611c6757600080fd5b505af1925050508015611c9857506040513d601f19601f82011682018060405250810190611c959190613354565b60015b611d1b573d8060008114611cc8576040519150601f19603f3d011682016040523d82523d6000602084013e611ccd565b606091505b50600081511415611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a9061318c565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d70565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611d9a82611372565b6000611da4611d78565b90506000815111611dc45760405180602001604052806000815250611def565b80611dce84611f92565b604051602001611ddf9291906131e8565b6040516020818303038152906040525b915050919050565b611e0183836120f3565b611e0e6000848484611be1565b611e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e449061318c565b60405180910390fd5b505050565b6000611e5d82610bd9565b9050611e6b81600084611b84565b611e766000836113c5565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec69190612f00565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f6b81600084611b89565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611fda576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120ee565b600082905060005b6000821461200c578080611ff590613381565b915050600a8261200591906133f9565b9150611fe2565b60008167ffffffffffffffff8111156120285761202761284f565b5b6040519080825280601f01601f19166020018201604052801561205a5781602001600182028036833780820191505090505b5090505b600085146120e7576001826120739190612f00565b9150600a85612082919061342a565b603061208e9190612f34565b60f81b8183815181106120a4576120a3612d12565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120e091906133f9565b945061205e565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a906134a7565b60405180910390fd5b61216c81611b18565b156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390613513565b60405180910390fd5b6121b860008383611b84565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122089190612f34565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c960008383611b89565b5050565b828054828255906000526020600020908101928215612346579160200282015b828111156123455782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906122ed565b5b509050612353919061241d565b5090565b82805461236390612bbc565b90600052602060002090601f01602090048101928261238557600085556123cc565b82601f1061239e57805160ff19168380011785556123cc565b828001600101855582156123cc579182015b828111156123cb5782518255916020019190600101906123b0565b5b5090506123d9919061241d565b5090565b5080546123e990612bbc565b6000825580601f106123fb575061241a565b601f016020900490600052602060002090810190612419919061241d565b5b50565b5b8082111561243657600081600090555060010161241e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124838161244e565b811461248e57600080fd5b50565b6000813590506124a08161247a565b92915050565b6000602082840312156124bc576124bb612444565b5b60006124ca84828501612491565b91505092915050565b60008115159050919050565b6124e8816124d3565b82525050565b600060208201905061250360008301846124df565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612543578082015181840152602081019050612528565b83811115612552576000848401525b50505050565b6000601f19601f8301169050919050565b600061257482612509565b61257e8185612514565b935061258e818560208601612525565b61259781612558565b840191505092915050565b600060208201905081810360008301526125bc8184612569565b905092915050565b6000819050919050565b6125d7816125c4565b81146125e257600080fd5b50565b6000813590506125f4816125ce565b92915050565b6000602082840312156126105761260f612444565b5b600061261e848285016125e5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061265282612627565b9050919050565b61266281612647565b82525050565b600060208201905061267d6000830184612659565b92915050565b61268c81612647565b811461269757600080fd5b50565b6000813590506126a981612683565b92915050565b600080604083850312156126c6576126c5612444565b5b60006126d48582860161269a565b92505060206126e5858286016125e5565b9150509250929050565b6000806040838503121561270657612705612444565b5b6000612714858286016125e5565b9250506020612725858286016125e5565b9150509250929050565b60008060006060848603121561274857612747612444565b5b60006127568682870161269a565b93505060206127678682870161269a565b9250506040612778868287016125e5565b9150509250925092565b61278b816125c4565b82525050565b60006020820190506127a66000830184612782565b92915050565b6000602082840312156127c2576127c1612444565b5b60006127d08482850161269a565b91505092915050565b6127e2816124d3565b81146127ed57600080fd5b50565b6000813590506127ff816127d9565b92915050565b6000806040838503121561281c5761281b612444565b5b600061282a8582860161269a565b925050602061283b858286016127f0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288782612558565b810181811067ffffffffffffffff821117156128a6576128a561284f565b5b80604052505050565b60006128b961243a565b90506128c5828261287e565b919050565b600067ffffffffffffffff8211156128e5576128e461284f565b5b6128ee82612558565b9050602081019050919050565b82818337600083830152505050565b600061291d612918846128ca565b6128af565b9050828152602081018484840111156129395761293861284a565b5b6129448482856128fb565b509392505050565b600082601f83011261296157612960612845565b5b813561297184826020860161290a565b91505092915050565b6000806000806080858703121561299457612993612444565b5b60006129a28782880161269a565b94505060206129b38782880161269a565b93505060406129c4878288016125e5565b925050606085013567ffffffffffffffff8111156129e5576129e4612449565b5b6129f18782880161294c565b91505092959194509250565b600067ffffffffffffffff821115612a1857612a1761284f565b5b612a2182612558565b9050602081019050919050565b6000612a41612a3c846129fd565b6128af565b905082815260208101848484011115612a5d57612a5c61284a565b5b612a688482856128fb565b509392505050565b600082601f830112612a8557612a84612845565b5b8135612a95848260208601612a2e565b91505092915050565b60008060408385031215612ab557612ab4612444565b5b6000612ac38582860161269a565b925050602083013567ffffffffffffffff811115612ae457612ae3612449565b5b612af085828601612a70565b9150509250929050565b600080600060608486031215612b1357612b12612444565b5b6000612b21868287016127f0565b9350506020612b328682870161269a565b9250506040612b43868287016125e5565b9150509250925092565b60008060408385031215612b6457612b63612444565b5b6000612b728582860161269a565b9250506020612b838582860161269a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bd457607f821691505b60208210811415612be857612be7612b8d565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c4a602183612514565b9150612c5582612bee565b604082019050919050565b60006020820190508181036000830152612c7981612c3d565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612cdc603e83612514565b9150612ce782612c80565b604082019050919050565b60006020820190508181036000830152612d0b81612ccf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612d9d602e83612514565b9150612da882612d41565b604082019050919050565b60006020820190508181036000830152612dcc81612d90565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612e09601883612514565b9150612e1482612dd3565b602082019050919050565b60006020820190508181036000830152612e3881612dfc565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e9b602983612514565b9150612ea682612e3f565b604082019050919050565b60006020820190508181036000830152612eca81612e8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f0b826125c4565b9150612f16836125c4565b925082821015612f2957612f28612ed1565b5b828203905092915050565b6000612f3f826125c4565b9150612f4a836125c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f7f57612f7e612ed1565b5b828201905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612fe6602583612514565b9150612ff182612f8a565b604082019050919050565b6000602082019050818103600083015261301581612fd9565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613078602483612514565b91506130838261301c565b604082019050919050565b600060208201905081810360008301526130a78161306b565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006130e4601983612514565b91506130ef826130ae565b602082019050919050565b60006020820190508181036000830152613113816130d7565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613176603283612514565b91506131818261311a565b604082019050919050565b600060208201905081810360008301526131a581613169565b9050919050565b600081905092915050565b60006131c282612509565b6131cc81856131ac565b93506131dc818560208601612525565b80840191505092915050565b60006131f482856131b7565b915061320082846131b7565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613268602e83612514565b91506132738261320c565b604082019050919050565b600060208201905081810360008301526132978161325b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006132c58261329e565b6132cf81856132a9565b93506132df818560208601612525565b6132e881612558565b840191505092915050565b60006080820190506133086000830187612659565b6133156020830186612659565b6133226040830185612782565b818103606083015261333481846132ba565b905095945050505050565b60008151905061334e8161247a565b92915050565b60006020828403121561336a57613369612444565b5b60006133788482850161333f565b91505092915050565b600061338c826125c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133bf576133be612ed1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613404826125c4565b915061340f836125c4565b92508261341f5761341e6133ca565b5b828204905092915050565b6000613435826125c4565b9150613440836125c4565b9250826134505761344f6133ca565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613491602083612514565b915061349c8261345b565b602082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006134fd601c83612514565b9150613508826134c7565b602082019050919050565b6000602082019050818103600083015261352c816134f0565b905091905056fea264697066735822122009e17032c209b1cebf8d89803c30cf10d8f15a8d5247e1f12ae82f5ff7433c7364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 117,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 127,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 131,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 137,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1135,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1954,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1597_storage"
      },
      {
        "astId": 1973,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "i_nftCreator",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 1978,
        "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
        "label": "tokenIdToNFTInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(nftInfo)1964_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(nftInfo)1964_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WarrantyCardStorage.nftInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(nftInfo)1964_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1597_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1596,
            "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(nftInfo)1964_storage": {
        "encoding": "inplace",
        "label": "struct WarrantyCardStorage.nftInfo",
        "members": [
          {
            "astId": 1956,
            "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1958,
            "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1960,
            "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1963,
            "contract": "contracts/WarrantyCardNFT.sol:WarrantyCardStorage",
            "label": "owners",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}